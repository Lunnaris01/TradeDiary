// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: trades.sql

package database

import (
	"context"
	"time"
)

const createTrade = `-- name: CreateTrade :one
INSERT INTO trades (user_id, order_time, symbol, price, order_type)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING id, user_id, order_time, symbol, price, order_type, created_at, updated_at
`

type CreateTradeParams struct {
	UserID    int32
	OrderTime time.Time
	Symbol    string
	Price     string
	OrderType string
}

func (q *Queries) CreateTrade(ctx context.Context, arg CreateTradeParams) (Trade, error) {
	row := q.db.QueryRowContext(ctx, createTrade,
		arg.UserID,
		arg.OrderTime,
		arg.Symbol,
		arg.Price,
		arg.OrderType,
	)
	var i Trade
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrderTime,
		&i.Symbol,
		&i.Price,
		&i.OrderType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserTrades = `-- name: GetUserTrades :many
SELECT id, user_id, order_time, symbol, price, order_type, created_at, updated_at FROM trades WHERE user_id = $1 ORDER BY order_time DESC
`

func (q *Queries) GetUserTrades(ctx context.Context, userID int32) ([]Trade, error) {
	rows, err := q.db.QueryContext(ctx, getUserTrades, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trade
	for rows.Next() {
		var i Trade
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrderTime,
			&i.Symbol,
			&i.Price,
			&i.OrderType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
